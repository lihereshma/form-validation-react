{"version":3,"sources":["Components/useForm.js","Components/Validate.js","Components/LoginBox.js","Components/RegisterBox.js","App.js","serviceWorker.js","index.js"],"names":["useForm","submit","validate","useState","username","email","password","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","Object","keys","length","handleChange","e","target","name","value","handleSubmit","preventDefault","Validate","test","LoginBox","alert","className","onSubmit","type","placeholder","onChange","RegisterBox","App","loginOpen","setLoginOpen","registerOpen","setRegisterOpen","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a32d3289.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nexport default function useForm(submit, validate) {\r\n  const [values, setValues] = useState({ username: '', email: '', password: '' })\r\n  const [errors, setErrors] = useState({})\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target\r\n    setValues({ ...values, [name]: value })\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    setErrors(validate(values))\r\n    setIsSubmitting(true)\r\n    setValues({ username: '', email: '', password: '' })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(Object.keys(errors).length === 0 && isSubmitting) {\r\n      submit()\r\n    }\r\n  })\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors\r\n  }\r\n}\r\n","export default function Validate(values) {\r\n\r\n  let errors = {}\r\n  const email_regex = /^([a-zA-Z0-9_]+)@([a-zA-Z0-9_]+)\\.([a-zA-Z]{2,5})$/\r\n  const password_regex = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/\r\n\r\n  if(!values.username) {\r\n    errors.username = \"Username is required\"\r\n  } else if(values.username.length < 5) {\r\n    errors.username = \"Username needs to be more than 5 characters\"\r\n  }\r\n\r\n  if(!values.email) {\r\n    errors.email = \"Email address is required\"\r\n  } else if(!email_regex.test(values.email)) {\r\n    errors.email = \"Email address is invalid\"\r\n  }\r\n\r\n  if(!values.password) {\r\n    errors.password = \"Password is required\"\r\n  } else if(!password_regex.test(values.password)) {\r\n    errors.password = \"Password is invalid\"\r\n  }\r\n  \r\n  return errors;\r\n}\r\n","import React from 'react'\r\nimport useForm from './useForm'\r\nimport Validate from './Validate'\r\n\r\nexport const LoginBox = () => {\r\n  const { handleChange, handleSubmit, values, errors } = useForm(submit, Validate)\r\n\r\n  function submit() {\r\n    alert(\"Login successfully\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"inner-container\">\r\n      <form className=\"box\" onSubmit={ handleSubmit }>\r\n        <div className=\"form-group\">\r\n          <input \r\n            type=\"text\" \r\n            name=\"username\" \r\n            value={ values.username } \r\n            className={ `form-control ${ errors.username && \"inputError\" }` } \r\n            placeholder=\"Username\"\r\n            onChange={ handleChange } \r\n          />\r\n          { errors.username && <span className='error'>{ errors.username }</span> }\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input \r\n            type=\"password\" \r\n            name=\"password\" \r\n            value={ values.password } \r\n            className={ `form-control ${ errors.password && \"inputError\" }` }\r\n            placeholder=\"Password\"\r\n            onChange={ handleChange } \r\n          />\r\n          { errors.password && <span className='error'>{ errors.password }</span> }\r\n        </div>\r\n        <button type=\"submit\" className=\"btn\">Sign In</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport useForm from './useForm'\r\nimport Validate from './Validate'\r\n\r\nexport const RegisterBox = () => {\r\n  const { handleChange, handleSubmit, values, errors } = useForm(submit, Validate)\r\n\r\n  function submit() {\r\n    alert(\"Registered successfully\")    \r\n  }\r\n \r\n  return (\r\n    <div className=\"inner-container\">\r\n      <form className=\"box\" onSubmit= { handleSubmit }>\r\n        <div className=\"form-group\">\r\n          <input \r\n            type=\"text\" \r\n            name=\"username\"\r\n            value={ values.username } \r\n            className={ `form-control ${ errors.username && \"inputError\" }` } \r\n            placeholder=\"Username\" \r\n            onChange={ handleChange }\r\n          />\r\n          { errors.username && <span className='error'>{ errors.username }</span> }\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input \r\n            type=\"text\" \r\n            name=\"email\"\r\n            value={ values.email } \r\n            className={ `form-control ${ errors.email && \"inputError\" }` }\r\n            placeholder=\"Email\"\r\n            onChange={ handleChange }\r\n          />\r\n          { errors.email && <span className='error'>{ errors.email }</span> }\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input \r\n            type=\"password\" \r\n            name=\"password\" \r\n            value={ values.password } \r\n            className={ `form-control ${ errors.password && \"inputError\" }` }\r\n            placeholder=\"Password\" \r\n            onChange={ handleChange }\r\n          />\r\n          { errors.password && <span className='error'>{ errors.password }</span> }\r\n        </div>\r\n        <button type=\"submit\" className=\"btn\">Sign Up</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { LoginBox } from './Components/LoginBox';\nimport { RegisterBox } from './Components/RegisterBox';\n\nfunction App() {\n  const [loginOpen, setLoginOpen] = useState(true)\n  const [registerOpen, setRegisterOpen] = useState(false)\n\n  const showLoginBox = () => {\n    setLoginOpen(true)\n    setRegisterOpen(false)\n  }\n\n  const showRegisterBox = () => {\n    setLoginOpen(false)\n    setRegisterOpen(true)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\" >\n        <ul className=\"box-controller col-lg-4 col-md-6\">\n          <li \n            className={ `controller ${ loginOpen && \"selected-controller\" }` } \n            onClick={ showLoginBox }>\n            Login\n          </li>\n          <li \n            className={ `controller ${ registerOpen && \"selected-controller\" }` } \n            onClick={ showRegisterBox }>\n            Register\n          </li>\n        </ul>\n\n        <div className=\"box-container col-lg-4 col-md-6\" >\n          { loginOpen && <LoginBox /> }\n          { registerOpen && <RegisterBox /> }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}